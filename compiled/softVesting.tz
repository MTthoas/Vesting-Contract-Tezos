{ parameter
    (or (unit %claim_tokens)
        (or (int %start_vesting)
            (list %transfer
               (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount))))))) ;
  storage
    (pair (big_map %ledger address nat)
          (big_map %operators address (set address))
          (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
          (big_map %metadata string bytes)
          (pair %extension
             (address %admin)
             (address %fa2_contract)
             (nat %token_id)
             (map %beneficiaries
                address
                (pair (timestamp %start_time)
                      (timestamp %end_time)
                      (int %total_tokens)
                      (nat %claimed_tokens)))
             (int %freeze_duration)
             (timestamp %free_duration_timestamp)
             (bool %vesting_started)
             (timestamp %start_time))) ;
  code { LAMBDA
           (pair (big_map address (set address)) address)
           unit
           { UNPAIR ;
             SENDER ;
             DUP 3 ;
             DUP 2 ;
             COMPARE ;
             EQ ;
             IF { DROP 3 ; UNIT }
                { SWAP ;
                  DIG 2 ;
                  GET ;
                  IF_NONE { EMPTY_SET address } {} ;
                  SWAP ;
                  MEM ;
                  IF { UNIT } { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } } ;
         LAMBDA
           (pair (big_map address nat) address)
           nat
           { UNPAIR ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
         LAMBDA
           (pair (big_map address nat) address nat)
           (big_map address nat)
           { UNPAIR 3 ; DIG 2 ; SOME ; DIG 2 ; UPDATE } ;
         LAMBDA
           (pair (pair (lambda (pair (big_map address nat) address nat) (big_map address nat))
                       (lambda (pair (big_map address nat) address) nat))
                 (pair (big_map address nat) address nat))
           (big_map address nat)
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR 3 ;
             DUP 2 ;
             DUP 2 ;
             PAIR ;
             DIG 5 ;
             SWAP ;
             EXEC ;
             DUP 4 ;
             DUP 2 ;
             COMPARE ;
             GE ;
             IF {} { PUSH string "FA2_INSUFFICIENT_BALANCE" ; FAILWITH } ;
             DIG 3 ;
             SWAP ;
             SUB ;
             ABS ;
             DUG 2 ;
             PAIR 3 ;
             EXEC } ;
         DUP 3 ;
         DUP 3 ;
         PAIR ;
         APPLY ;
         LAMBDA
           (pair (pair (lambda (pair (big_map address nat) address nat) (big_map address nat))
                       (lambda (pair (big_map address nat) address) nat))
                 (pair (big_map address nat) address nat))
           (big_map address nat)
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR 3 ;
             DUP 2 ;
             DUP 2 ;
             PAIR ;
             DIG 5 ;
             SWAP ;
             EXEC ;
             DIG 3 ;
             ADD ;
             DUG 2 ;
             PAIR 3 ;
             EXEC } ;
         DUP 4 ;
         DUP 4 ;
         PAIR ;
         APPLY ;
         DIG 2 ;
         DIG 3 ;
         DROP 2 ;
         NIL operation ;
         DIG 4 ;
         UNPAIR ;
         IF_LEFT
           { DROP ;
             SENDER ;
             DUP 2 ;
             GET 8 ;
             GET 7 ;
             DUP 2 ;
             GET ;
             IF_NONE
               { DROP 6 ; PUSH string "You are not a beneficiary" ; FAILWITH }
               { NOW ;
                 DUP 4 ;
                 GET 8 ;
                 GET 11 ;
                 DUP 2 ;
                 COMPARE ;
                 LT ;
                 IF { DROP 8 ;
                      PUSH string "You can't claim tokens before the freeze duration ends" ;
                      FAILWITH }
                    { DUP 2 ;
                      CAR ;
                      DUP 3 ;
                      GET 3 ;
                      SUB ;
                      DUP 3 ;
                      CAR ;
                      DUP 3 ;
                      SUB ;
                      DUP 4 ;
                      GET 3 ;
                      DIG 3 ;
                      COMPARE ;
                      GE ;
                      IF { DROP 2 ; DUP ; GET 5 }
                         { DUP 3 ;
                           GET 5 ;
                           MUL ;
                           EDIV ;
                           IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                           CAR } ;
                      DUP 2 ;
                      GET 6 ;
                      DUP 2 ;
                      SUB ;
                      PUSH int 0 ;
                      DUP 2 ;
                      COMPARE ;
                      GT ;
                      IF { DIG 5 ;
                           DROP ;
                           NIL (pair address (list (pair address nat nat))) ;
                           NIL (pair address nat nat) ;
                           DIG 2 ;
                           ABS ;
                           DUP 7 ;
                           GET 8 ;
                           GET 5 ;
                           DUP 7 ;
                           PAIR 3 ;
                           CONS ;
                           DUP 6 ;
                           GET 8 ;
                           CAR ;
                           PAIR ;
                           CONS ;
                           DUP 5 ;
                           CAR ;
                           SWAP ;
                           ITER { UNPAIR ;
                                  DUG 2 ;
                                  ITER { UNPAIR 3 ;
                                         SWAP ;
                                         DROP ;
                                         DUP 4 ;
                                         DUP 9 ;
                                         GET 3 ;
                                         PAIR ;
                                         DUP 12 ;
                                         SWAP ;
                                         EXEC ;
                                         DROP ;
                                         DUP 2 ;
                                         DUP 5 ;
                                         DIG 4 ;
                                         PAIR 3 ;
                                         DUP 10 ;
                                         SWAP ;
                                         EXEC ;
                                         PAIR 3 ;
                                         DUP 7 ;
                                         SWAP ;
                                         EXEC } ;
                                  SWAP ;
                                  DROP } ;
                           DIG 5 ;
                           DIG 6 ;
                           DIG 7 ;
                           DROP 3 ;
                           DUG 2 ;
                           ABS ;
                           UPDATE 6 ;
                           DUP 4 ;
                           DIG 2 ;
                           UPDATE 1 ;
                           DUP 4 ;
                           GET 8 ;
                           DIG 4 ;
                           GET 8 ;
                           GET 7 ;
                           DIG 3 ;
                           DIG 4 ;
                           SWAP ;
                           SOME ;
                           SWAP ;
                           UPDATE ;
                           UPDATE 7 ;
                           UPDATE 8 ;
                           NIL operation }
                         { SWAP ; DIG 2 ; DIG 3 ; DIG 6 ; DIG 7 ; DIG 8 ; DROP 7 ; SWAP } ;
                      PAIR } } }
           { IF_LEFT
               { DIG 3 ;
                 DIG 4 ;
                 DIG 5 ;
                 DROP 3 ;
                 DUP 2 ;
                 GET 8 ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 NEQ ;
                 IF { DROP 3 ; PUSH string "Not admin" ; FAILWITH }
                    { DUP 2 ;
                      GET 8 ;
                      GET 13 ;
                      IF { DROP 3 ; PUSH string "Vesting already started" ; FAILWITH }
                         { PUSH int 86400 ;
                           MUL ;
                           NOW ;
                           ADD ;
                           DUP 2 ;
                           GET 8 ;
                           PUSH bool True ;
                           UPDATE 13 ;
                           SWAP ;
                           UPDATE 11 ;
                           NOW ;
                           UPDATE 14 ;
                           UPDATE 8 ;
                           SWAP ;
                           PAIR } } }
               { DIG 2 ;
                 DROP ;
                 DUP 2 ;
                 CAR ;
                 SWAP ;
                 ITER { UNPAIR ;
                        DUG 2 ;
                        ITER { UNPAIR 3 ;
                               SWAP ;
                               DROP ;
                               DUP 4 ;
                               DUP 6 ;
                               GET 3 ;
                               PAIR ;
                               DUP 9 ;
                               SWAP ;
                               EXEC ;
                               DROP ;
                               DUP 2 ;
                               DUP 5 ;
                               DIG 4 ;
                               PAIR 3 ;
                               DUP 7 ;
                               SWAP ;
                               EXEC ;
                               PAIR 3 ;
                               DUP 4 ;
                               SWAP ;
                               EXEC } ;
                        SWAP ;
                        DROP } ;
                 DIG 2 ;
                 DIG 3 ;
                 DIG 4 ;
                 DROP 3 ;
                 UPDATE 1 ;
                 NIL operation ;
                 PAIR } } } }

